{% schema %}
{
  "name": "Location-based Products",
  "settings": [
    {
      "type": "collection",
      "id": "collection",
      "label": "Select Collection"
    },
    {
      "type": "text",
      "id": "distance_unit",
      "label": "Distance Unit",
      "default": "km",
      "info": "Enter 'km' for kilometers or 'mi' for miles"
    },
    {
      "type": "text",
      "id": "location_permission_text",
      "label": "Location Permission Text",
      "default": "Allow location access to see products sorted by distance"
    }
  ],
  "presets": [
    {
      "name": "Location-based Products",
      "category": "Collection"
    }
  ]
}
{% endschema %}

<div class="location-based-products" id="locationProducts">
  <div class="location-permission" id="locationPermission">
    <p>{{ section.settings.location_permission_text }}</p>
    <button onclick="requestLocationPermission()" class="location-button">Allow Location Access</button>
  </div>

  <div class="products-container" id="productsContainer" style="display: none;">
    <div class="products-grid" id="productsGrid"></div>
  </div>
</div>

<style>
.location-based-products {
  padding: 20px;
}

.location-permission {
  text-align: center;
  padding: 20px;
  background: #f5f5f5;
  border-radius: 8px;
  margin-bottom: 20px;
}

.location-button {
  background: #008060;
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 4px;
  cursor: pointer;
  font-size: 16px;
}

.location-button:hover {
  background: #006e52;
}

.products-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 20px;
}

.product-card {
  border: 1px solid #ddd;
  border-radius: 8px;
  padding: 15px;
  text-align: center;
}

.product-card img {
  max-width: 100%;
  height: auto;
}

.distance-badge {
  background: #008060;
  color: white;
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 14px;
  display: inline-block;
  margin-top: 10px;
}
</style>

<script>
let userLocation = null;
const products = [];
let locationAvailable = false;

// Function to calculate distance between two coordinates using Haversine formula
function calculateDistance(lat1, lon1, lat2, lon2) {
  const R = 6371; // Earth's radius in kilometers
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLon = (lon2 - lon1) * Math.PI / 180;
  const a = 
    Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
    Math.sin(dLon/2) * Math.sin(dLon/2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  const distance = R * c;
  return distance;
}

// Function to format distance
function formatDistance(distance, unit) {
  if (unit === 'mi') {
    distance = distance * 0.621371; // Convert km to miles
  }
  return `${distance.toFixed(1)} ${unit}`;
}

// Function to handle successful location retrieval
function handleLocationSuccess(position) {
  userLocation = {
    lat: position.coords.latitude,
    lng: position.coords.longitude
  };
  locationAvailable = true;
  console.log(`User location: Latitude ${userLocation.lat}, Longitude ${userLocation.lng}`);
  document.getElementById('locationPermission').style.display = 'none';
  document.getElementById('productsContainer').style.display = 'block';
  sortAndDisplayProducts();
}

// Function to handle location errors
function handleLocationError(error) {
  let errorMessage = '';
  switch (error.code) {
    case error.PERMISSION_DENIED:
      errorMessage = "Location access denied. Products will be sorted by name.";
      break;
    case error.POSITION_UNAVAILABLE:
      errorMessage = "Location information unavailable. Products will be sorted by name.";
      break;
    case error.TIMEOUT:
      errorMessage = "Location request timed out. Products will be sorted by name.";
      break;
    default:
      errorMessage = "Unable to get location. Products will be sorted by name.";
      break;
  }
  console.log(errorMessage);
  alert(errorMessage);
  locationAvailable = false;
  document.getElementById('locationPermission').style.display = 'none';
  document.getElementById('productsContainer').style.display = 'block';
  sortAndDisplayProducts();
}

// Function to request location permission
function requestLocationPermission() {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(
      handleLocationSuccess,
      handleLocationError
    );
  } else {
    const errorMessage = "Geolocation not supported. Products will be sorted by name.";
    console.log(errorMessage);
    alert(errorMessage);
    locationAvailable = false;
    document.getElementById('locationPermission').style.display = 'none';
    document.getElementById('productsContainer').style.display = 'block';
    sortAndDisplayProducts();
  }
}

// Initialize location request when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
  requestLocationPermission();
});

// Function to sort and display products
function sortAndDisplayProducts() {
  const productsGrid = document.getElementById('productsGrid');
  const unit = {{ section.settings.distance_unit | json }};
  
  // Get all products from the collection
  {% for product in collections[section.settings.collection].products %}
    products.push({
      id: {{ product.id | json }},
      title: {{ product.title | json }},
      image: {{ product.featured_image | img_url: 'medium' | json }},
      url: {{ product.url | json }},
      price: {{ product.price | money | json }},
      lat: {{ product.metafields.custom.latitude | default: 0 | json }},
      lng: {{ product.metafields.custom.longitude | default: 0 | json }}
    });
  {% endfor %}

  // Sort products based on location availability
  if (locationAvailable && userLocation) {
    // Sort by distance if location is available
    products.sort((a, b) => {
      const distanceA = calculateDistance(userLocation.lat, userLocation.lng, a.lat, a.lng);
      const distanceB = calculateDistance(userLocation.lat, userLocation.lng, b.lat, b.lng);
      return distanceA - distanceB;
    });
  } else {
    // Sort by name if location is not available
    products.sort((a, b) => a.title.localeCompare(b.title));
  }

  // Display sorted products
  productsGrid.innerHTML = products.map(product => {
    let distanceBadge = '';
    if (locationAvailable && userLocation) {
      const distance = calculateDistance(userLocation.lat, userLocation.lng, product.lat, product.lng);
      distanceBadge = `<span class="distance-badge">${formatDistance(distance, unit)} away</span>`;
    }
    
    return `
      <div class="product-card">
        <a href="${product.url}">
          <img src="${product.image}" alt="${product.title}">
          <h3>${product.title}</h3>
          <p>${product.price}</p>
          ${distanceBadge}
        </a>
      </div>
    `;
  }).join('');
}
</script>
